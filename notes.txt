Consensus
- validators
    - nodes with signgiciat amount of crypto are validators
    - responsible for vlaidaitng transactions
    - can be proposer
- Proposer
    - validator is chosen to propose a block
    - liklihood of being chosen to validate block proportional to stake in network
- Slashing
    - any nodes found to be acting maliciously have their stake slashed
    - mainly for validators (significant stake holders that influence network)
- Rewards
    - validators are rewared for partiicaption -> get rewarded transaction fees
    - rewards distributed proportional to stake




NEXT STEPS
- code review - refactor, test, document
- genesis block
- triggers (new tx, new block, dump stores, mempool, caches ...)
- testing
- might be useful to exchange public keys in handshake, refactor peer cache, other caches

Caches
- transaction cache is good
- block ccahce refactor to match transactgion cache'
- maybe add more to peer cache

Logging
- all logging at top level
- info for moving between steps
- error when encounter error
- break out behavioral units to helper functions, they can log errors, but not info since one step
- all validation breakdouts are considered top level -> error logging in there is fine

Design Decisions
- validator node will broadcast commits/votes to whole network
- validators only broadcast positive pre-vote/pre-commit messages

Problems
- blockStore.Put